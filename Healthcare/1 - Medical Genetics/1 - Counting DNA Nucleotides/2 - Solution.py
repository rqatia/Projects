dataset = 'CGTATTACTTTCAATTGAGCAAGCCAGGTCCGTTCGTTCGCCGTTGGCTGGAAGTACCTCGACGCTACGACCCGCCGAGCCACGACAGGTTTTCATCCAGTCGTTATTGAGATTTTAATCTGAGGCAATCTGCATTACGTATTTTCCGCTCGAGTCACCCCCCAAATTTACCAATAAAGTCGGCAACGCGGTTTGATACCGTGTCTGTGGCCTCACCATCCTCGATGACTATATGGAGATGCCCGATTTTATGGTCGGCTACCGGTTAGTGGACACGCCATTACGATAGCGGCGCCTAGGACTGTCCGGTAGTTAATACATGAACGCTAGAGACACGGCCCACTAATTTTGTGCTAATCTTGAGCTCTGTGGGTTCTTCTTGGGAGGCATGGATCGACTTCCTGGCGCCCTAGTAACATAGTACGTACAAGTGCCTAAAGAACCCCTGCTTACTATCGTCAGTAAAACTTATATTTAAAAGCGGTGCGAAACTAGGACTGGTCACCGTAGAACGCAGGTGTTGAACACAGACGAATTCAAAGAGCTACGCTTGTGGAAATCTATTCGGATTCATTAAGTGGCAACCTTACGCTACCGCGGTCGTCTTATTATGGTTTACAGCTCCACGGTTGAAAAATAGTCTTCAGTAATACCGACCAGTGGACGGTACAGAGCGCGCCCCACCTAGTACGCCGAGTCGTTTATCATGTTTCAACAGATAGAAAAGGCGTAACGGCGTGCGCAGCTACTATCCACCCCAGAGACTTAAATTTCACTGCCCGCAAGATAACCACGCTAAGTAGCTTACTTCGCCTTCAGCTTTT'

a = dataset.count('A')
c = dataset.count('C')
g = dataset.count('G')
t = dataset.count('T')

print(a, c, g, t)

""" This problem can be solved similarly in every imperative programming language.The algorithm is straightforward: I created  a counter for every base and then iterate through the sequence, updating the necessary counter.
i used the.count varilabe to return the value of the element """

""" 
Similarly, but with much less code (notice it also takes care of input and output):

print(*map(input().count, "ACGT"))

"""

